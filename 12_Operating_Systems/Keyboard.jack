// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack
/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    /** Initializes the keyboard. */
    function void init() {
    return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return Memory.peek(24576);
    }


    /**	Waits until a key is pressed on the keyboard and released,
     *  then echoes the key to the screen, and returns the character 
     *  of the pressed key. */
    function char readChar() {
        var char c;

        // Wait until key is pressed
        while (Keyboard.keyPressed() = 0) {
            // Do nothing
        }

        let c = Keyboard.keyPressed();

        // Wait until key is released
        while (~(Keyboard.keyPressed() = 0)) {
            // Do nothing
        }

        // Echo to screen
        do Output.printChar(c);

        return c;
    }


    /**	Displays the message on the screen, reads from the keyboard the entered
     *  text until a newline character is detected, echoes the text to the screen,
     *  and returns its value. Also handles user backspaces. */
    function String readLine(String message) {
        var String str;
        var char c;
        var int length;

        // Display prompt
        do Output.printString(message);

        let str = String.new(100); // Allocate enough room
        let length = 0;
        
        while (true) {
            // Wait until key is pressed
            while (Keyboard.keyPressed() = 0) {
                // Do nothing
            }

            let c = Keyboard.keyPressed();

            // Wait until key is released
            while (~(Keyboard.keyPressed() = 0)) {
                // Do nothing
            }

            
            // Handle newline (ASCII 128)
            if (c = 128) {
                do Output.println();
                return str;
            }

            // Handle backspace (ASCII 129)
            if (c = 129) {
                if (length > 0) {
                    let length = length - 1;
                    do str.eraseLastChar(); // This is a helper function you must write
                    do Output.backSpace();
                }
            } else {
                //let c = Keyboard.readChar();
                do Output.printChar(c);
                do str.appendChar(c);
                let length = length + 1;
            }
            

            let c = 0;
        }

        return str;
    }



    /** Displays the message on the screen, reads from the keyboard the entered
     *  text until a newline character is detected, echoes the text to the screen,
     *  and returns its integer value (until the first non-digit character in the
     *  entered text is detected). Also handles user backspaces. */
    function int readInt(String message) {
        var String str;
        var int i, value, sign, len, ch;

        let str = Keyboard.readLine(message);
        let value = 0;
        let sign = 1;
        let len = str.length();
        let i = 0;

        if (len = 0) {
            return 0;
        }

        let ch = str.charAt(0);
        if (ch = 45) { // '-'
            let sign = -1;
            let i = 1;
        }

        while (i < len) {
            let ch = str.charAt(i);
            if ((ch < 48) | (ch > 57)) {
                return value * sign;
            }

            let value = value * 10 + (ch - 48);
            let i = i + 1;
        }

        return value * sign;
    }

}
