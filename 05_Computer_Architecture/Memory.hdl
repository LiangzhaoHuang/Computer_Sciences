// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
	DMux4Way(in=true, sel=address[13..14], a=load1, b=load2, c=load3, d=load4);
    Or(a=load1, b=load2, out=load12);
    And(a=load12, b=load, out=loadRAM);
    And(a=load3, b=load, out=loadScreen);

    RAM16K(in=in, load=loadRAM, address=address[0..13], out=outRAM);
    Screen(in=in, load=loadScreen, address=address[0..12], out=outScreen);
    Keyboard(out=outKeyboard);
    Mux4Way16(a=outRAM, b=outRAM, c=outScreen, d=outKeyboard, sel=address[13..14], out=out1);
    Or(a=address[0], b=address[1], out=or01);
    Or(a=address[2], b=address[3], out=or23);
    Or(a=address[4], b=address[5], out=or45);
    Or(a=address[6], b=address[7], out=or67);
    Or(a=address[8], b=address[9], out=or89);
    Or(a=address[10], b=address[11], out=or1011);
    Or(a=address[12], b=or1011, out=or1012);
    Or(a=or89, b=or1012, out=or812);
    Or(a=or67, b=or812, out=or612);
    Or(a=or45, b=or612, out=or412);
    Or(a=or23, b=or412, out=or212);
    Or(a=or01, b=or212, out=or012);
    And(a=address[13], b=address[14], out=and1314);
    And(a=and1314, b=or012, out=loadRange);
    Mux16(a=out1, b=false, sel=loadRange, out=out);
}